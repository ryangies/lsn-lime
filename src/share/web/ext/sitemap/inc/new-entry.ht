[#:js]

  var form = new js.ext.share.input.Form();
  var dnode = null;

  function onDialogLoad () {

    form.loadSchema([#:json schema]);

    var fields = form.getFields();
    var rows = [];
    for (var i = 0, field; field = fields[i]; i++) {
      if (field.data.type == 'hidden') continue;
      rows = rows.concat(js.dom.createElements(
        'DT.form-field=' + field.data.label,
        'DD.form-field', field.input.getElements()
      ));
    }
    var div = this.getElementById('inputs');
    js.dom.appendChildren(div, js.dom.createElements('DL.form', rows));

  }

  function onOk () {
    var values = form.serializeValues();
    var req = new js.lsn.Request('/ext/sitemap/module.pm/new_entry');
    req.submit(values, [function (req) {
      if (req && req.responseHash) {
        var db = dnode.getDataBridge();
        var result = req.responseHash.getObject('/body');
        db.batch(result.commands);
        if (js.dom.getValue(this.getElementById('close-after-create'))) {
          this.hide();
        } else {
          var elem = form.getField('name').input.elem;
          if (elem) elem.select();
        }
      } else {
        alert(req.xhr.responseText);
      }
    }, this]);
  }

  function populateTargets (dnode) {
    var select = form.getInput('pathname');
    dnode.iterate(function (k, v) {
      select.addItem(k, k);
    });
  }

  function onDialogShow (action, params) {
    dnode = params.dnode;
    form.getField('paddr').input.setValue(dnode.getAddress());
    var options = [];
    var select = form.getInput('pathname');
    select.clear();
    var db = dnode.getDataBridge();
    var addr = dnode.getString('.addr') || '/';
    db.get(addr, [populateTargets, this]);
    form.getField('name').input.focus();
  }

  env.dialogs.register('new-sitemap-entry', js.ext.share.ui.Dialog, function () {
    this.setContent(js.dom.getElement('[#_content_id]'));
    this.addActionListener('onDialogLoad', onDialogLoad, this);
    this.addActionListener('onDialogShow', onDialogShow, this);
    this.addActionListener('onOk', onOk, this);
    this.makeModal();
  });

  env.registerHandler('ext-sitemap-show-new-sitemap-entry', function (action, node) {
    env.dialogs.get('new-sitemap-entry').show({'dnode':node.data});
  });

[#:end js]

[#:into /ext/share/dialog/layout-popup.ht]
  <div id="dialog-contents">
    <div id="inputs"></div>
  </div>
  <div id="dialog-buttons">
    <label for="close-after-create">Close dialog after create</label>
    <input id="close-after-create" type="checkbox" checked="checked"/>
    <button type="button" name="action" value="ok">Create</button>
  </div>
[#:end into]

__DATA__
_content_id => ext-sitemap-new-sitemap-entry-dialog
_title => New webpage
_icon => /res/icons/16x16/sitemap/webpage.png
schema => %{
  fields => @{
    %{
      type => hidden
      name => paddr
    }
    %{
      type => text
      name => name
      label => Name
      description => A short common-name for this webpage.
    }
    %{
      type => select
      name => pathname
      label => Target
      description => The sitemap entry will be created for this resource
      input => %{
      }
    }
  }
}
